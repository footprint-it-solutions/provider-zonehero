/*
Copyright 2025 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"reflect"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)


// ListenerParameters are the configurable fields of a Listener.
type ListenerParameters struct {
	// +optional
	ALPNPolicy               string    `json:"alpnPolicy,omitempty"`
	// +optional
	CertificateSecretsName   string    `json:"certificateSecretsName,omitempty"`
	// +optional
	CreatedAt                metav1.Time `json:"createdAt"`
	// +kubebuilder:default=false
	EnableDeletionProtection bool      `json:"enableDeletionProtection"`
	// +optional
	ID                       string    `json:"id"`
	LoadBalancerID           string    `json:"loadBalancerId"`
	// +kubebuilder:default=1.1
	// +optional
	OverprovisioningFactor   float64   `json:"overprovisioningFactor"`
	Port                     int       `json:"port"`
	Protocol                 string    `json:"protocol"`
	TargetGroupARN           string    `json:"targetGroupArn"`
	// +optional
	UpdatedAt                metav1.Time `json:"updatedAt"`
	// +optional
	URI                      string    `json:"uri"`
}


// ListenerObservation are the observable fields of a Listener.
// Any value that is computed or generated by the external provider should be an Observation field. 
// Consult the ZoneHero API documentation to find out which fields have `Computed: true` in the schema attributes.

type ListenerObservation struct {
	// ID is the unique identifier of the listener.
	ID                       	string    `json:"id"`

	// Overprovisioning factor for the listener.
	OverprovisioningFactor   	*float64 `json:"overprovisioningFactor"`

	// CreatedAt is when the listener was created.
	CreatedAt 					*metav1.Time `json:"createdAt,omitempty"`

	// UpdatedAt is when the listener was last updated.
	UpdatedAt 					*metav1.Time `json:"updatedAt,omitempty"`
}

type ListenerUpdate struct {
	ALPNPolicy               *string  `json:"alpnPolicy,omitempty"`
	CertificateSecretsName   *string  `json:"certificateSecretsName,omitempty"`
	EnableDeletionProtection *bool    `json:"enableDeletionProtection"`
	OverprovisioningFactor   *float64 `json:"overprovisioningFactor"`
	Port                     *int     `json:"port,omitempty"`
	Protocol                 *string  `json:"protocol,omitempty"`
	TargetGroupARN           *string  `json:"targetGroupArn,omitempty"`
}

// A ListenerSpec defines the desired state of a Listener.
type ListenerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ListenerParameters `json:"forProvider"`
}

// A ListenerStatus represents the observed state of a Listener.
type ListenerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ListenerObservation `json:"atProvider,omitempty"`
}

// A Listener is an example API type.
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zonehero}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ListenerSpec   `json:"spec"`
	Status ListenerStatus `json:"status,omitempty"`
}

// ListenerList contains a list of Listener
// +kubebuilder:object:root=true
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Listener type metadata.
var (
	ListenerKind             = reflect.TypeOf(Listener{}).Name()
	ListenerGroupKind        = schema.GroupKind{Group: Group, Kind: ListenerKind}.String()
	ListenerKindAPIVersion   = ListenerKind + "." + SchemeGroupVersion.String()
	ListenerGroupVersionKind = SchemeGroupVersion.WithKind(ListenerKind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
